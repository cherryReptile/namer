// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "namer/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Usecase) Delete(id int) (*domain.Response, error) {
	ret := _m.Called(id)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Usecase) GetByID(id int) (*domain.Response, error) {
	ret := _m.Called(id)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithFilterAndPagination provides a mock function with given fields: req
func (_m *Usecase) GetWithFilterAndPagination(req *domain.FilterWithPagination) (*domain.Response, error) {
	ret := _m.Called(req)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.FilterWithPagination) (*domain.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.FilterWithPagination) *domain.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.FilterWithPagination) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPerson provides a mock function with given fields: req
func (_m *Usecase) NewPerson(req *domain.Person) (*domain.Response, error) {
	ret := _m.Called(req)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Person) (*domain.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.Person) *domain.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Person) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: req
func (_m *Usecase) Update(req *domain.Person) (*domain.Response, error) {
	ret := _m.Called(req)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Person) (*domain.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.Person) *domain.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Person) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
