// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	external "namer/internal/domain/external"

	mock "github.com/stretchr/testify/mock"
)

// APIRepository is an autogenerated mock type for the APIRepository type
type APIRepository struct {
	mock.Mock
}

// GetNameInfo provides a mock function with given fields: name
func (_m *APIRepository) GetNameInfo(name string) (*external.ExternalResponse, error) {
	ret := _m.Called(name)

	var r0 *external.ExternalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*external.ExternalResponse, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *external.ExternalResponse); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external.ExternalResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIRepository creates a new instance of APIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIRepository {
	mock := &APIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
