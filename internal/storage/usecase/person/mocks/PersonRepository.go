// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "namer/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *PersonRepository) Create(req *domain.Person) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Person) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PersonRepository) Delete(id int) (*int64, error) {
	ret := _m.Called(id)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *int64); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PersonRepository) GetByID(id int) (*domain.Person, error) {
	ret := _m.Called(id)

	var r0 *domain.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithFilterAndPagination provides a mock function with given fields: filter, pagination
func (_m *PersonRepository) GetWithFilterAndPagination(filter string, pagination string) ([]byte, error) {
	ret := _m.Called(filter, pagination)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filter, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: req
func (_m *PersonRepository) Update(req *domain.Person) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Person) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
